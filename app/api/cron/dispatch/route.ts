
import { prisma } from '../../../../lib/db';
import { sendEmail } from '../../../../lib/providers/email';
import { sendSms } from '../../../../lib/providers/sms';
export const runtime='nodejs';
export async function GET(){ const now=new Date(); const nudges=await prisma.nudge.findMany({ where:{ scheduledAt:{ lte: now } }, take:50 }); let sent=0; for(const n of nudges){ const prior=await prisma.nudgeLog.findFirst({ where:{ nudgeId:n.id, status:'sent' } }); if(prior) continue; let canSend=true; if(n.recipientId){ const prof=await prisma.profile.findUnique({ where:{ userId:n.recipientId } }); if(n.channel==='email' && prof && !prof.emailOptIn) canSend=false; if(n.channel==='sms' && prof && !prof.smsOptIn) canSend=false; } try{ if(canSend){ if(n.channel==='sms'){ await sendSms('', n.message) } else { await sendEmail('', n.title||'Nudge', `<p>${n.message.replace(/\n/g,'<br/>')}</p>`) } await prisma.nudgeLog.create({ data:{ nudgeId:n.id, userId:n.recipientId||null, channel:n.channel, status:'sent' } }); sent++; } else { await prisma.nudgeLog.create({ data:{ nudgeId:n.id, userId:n.recipientId||null, channel:n.channel, status:'skipped', error:'opt-out' } }); } } catch(e:any){ await prisma.nudgeLog.create({ data:{ nudgeId:n.id, userId:n.recipientId||null, channel:n.channel, status:'error', error:String(e?.message||e) } }); } } return new Response(JSON.stringify({ ok:true, sent }), { status:200, headers:{'Content-Type':'application/json'} }); }

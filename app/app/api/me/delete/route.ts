
import { NextRequest } from 'next/server';
import { requireUser } from '../../../../lib/auth';
import { prisma } from '../../../../lib/db';
export const runtime='nodejs';
export async function POST(req:NextRequest){ const u=await requireUser(); const b=await req.json().catch(()=>({confirm:false})); if(!b.confirm) return Response.json({error:'Confirm required'},{status:400}); const conv=await prisma.conversation.findMany({ where:{ userId:u.id } }); const convIds=conv.map(c=>c.id); await prisma.messageTag.deleteMany({ where:{ message:{ conversationId:{ in: convIds } } } }); await prisma.message.deleteMany({ where:{ conversationId:{ in: convIds } } }); await prisma.conversation.deleteMany({ where:{ id:{ in: convIds } } }); const contacts=await prisma.contact.findMany({ where:{ userId:u.id } }); const cids=contacts.map(c=>c.id); const itx=await prisma.interaction.findMany({ where:{ userId:u.id } }); const iids=itx.map(i=>i.id); await prisma.interactionFeedback.deleteMany({ where:{ interactionId:{ in:iids } } }); await prisma.feedbackToken.deleteMany({ where:{ interactionId:{ in:iids } } }); await prisma.interaction.deleteMany({ where:{ id:{ in:iids } } }); await prisma.contact.deleteMany({ where:{ id:{ in:cids } } }); await prisma.favorite.deleteMany({ where:{ userId:u.id } }); await prisma.profile.deleteMany({ where:{ userId:u.id } }); await prisma.nudge.deleteMany({ where:{ creatorId:u.id } }); await prisma.nudgeLog.deleteMany({ where:{ userId:u.id } }).catch(()=>{}); await prisma.user.delete({ where:{ id:u.id } }); return Response.json({ ok:true }, { status:200 }); }

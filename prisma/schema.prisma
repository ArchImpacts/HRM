
generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql" url = env("DATABASE_URL") }
enum Role { USER ADMIN }
enum Plan { FREE PLUS PREMIUM }
model User {
  id        String   @id           // Clerk userId
  email     String
  role      Role     @default(USER)
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  conversations Conversation[]
  contacts   Contact[]
  nudges     Nudge[] @relation("CreatorNudges")
  favorites  Favorite[]
}
model Profile {
  userId       String   @id
  user         User     @relation(fields: [userId], references: [id])
  preferredName String?
  phone         String?
  emailOptIn    Boolean  @default(true)
  smsOptIn      Boolean  @default(false)
  trackOptIn    Boolean  @default(false)
  tags          String[]
  emailOptInToken String?
}
model Conversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  startedAt DateTime @default(now())
  messages  Message[]
}
model Message {
  id             String   @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           String
  text           String
  tokenIn        Int?
  tokenOut       Int?
  createdAt      DateTime @default(now())
  tags           MessageTag[]
}
model MessageTag {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  key       String
  value     String
  score     Float?
  createdAt DateTime @default(now())
}
model Resource {
  id        String @id @default(cuid())
  title     String
  description String
  url       String
  thumbnail String?
  createdAt DateTime @default(now())
  favorites Favorite[]
}
model Favorite {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])
  createdAt DateTime @default(now())
}
model Nudge {
  id          String   @id @default(cuid())
  creatorId   String
  creator     User     @relation("CreatorNudges", fields: [creatorId], references: [id])
  recipientId String?
  title       String
  message     String
  channel     String   // email or sms
  scheduledAt DateTime
  createdAt   DateTime @default(now())
}
model NudgeLog {
  id        String   @id @default(cuid())
  nudgeId   String?
  campaignId String?
  userId    String?
  channel   String
  status    String
  error     String?
  createdAt DateTime @default(now())
}
model Contact {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  roleLabel String?
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  interactions Interaction[]
}
model Interaction {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id])
  prompt     String
  scheduledAt DateTime
  nudgeId    String?
  createdAt  DateTime @default(now())
  feedback   InteractionFeedback[]
}
model InteractionFeedback {
  id            String   @id @default(cuid())
  interactionId String
  interaction   Interaction @relation(fields: [interactionId], references: [id])
  happened      Boolean
  rating        Int
  notes         String?
  createdAt     DateTime  @default(now())
}
model FeedbackToken {
  token        String   @id
  interactionId String
  expiresAt    DateTime
  used         Boolean  @default(false)
}
model Document {
  id        String   @id @default(cuid())
  title     String
  url       String?
  meta      Json?
  createdAt DateTime @default(now())
  chunks    Chunk[]
}
model Chunk {
  id          String   @id @default(cuid())
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content     String
  embedding   Bytes
  createdAt   DateTime @default(now())
}
